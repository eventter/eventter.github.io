<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on EventterMQ</title>
    <link>https://eventter.io/docs/</link>
    <description>Recent content in Docs on EventterMQ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Dec 2018 14:30:01 +0100</lastBuildDate>
    
	<atom:link href="https://eventter.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>https://eventter.io/docs/getting-started/</link>
      <pubDate>Thu, 27 Dec 2018 14:30:01 +0100</pubDate>
      
      <guid>https://eventter.io/docs/getting-started/</guid>
      <description>Installation EventterMQ doesn&amp;rsquo;t have a stable version yet. You can use latest Docker image that is automatically built from the latest source code, or you can build the broker binary yourself.
Docker Docker image can be pulled from Docker Hub.
$ docker pull eventter/mq To start the broker, run:
$ docker run --name emq-broker -p 16000:16000 -d eventter/mq Build from source You will need:
 Git Go (1.11 or newer)  First download source code from the project public repository:</description>
    </item>
    
    <item>
      <title>Use Cases</title>
      <link>https://eventter.io/docs/use-cases/</link>
      <pubDate>Thu, 27 Dec 2018 16:11:09 +0100</pubDate>
      
      <guid>https://eventter.io/docs/use-cases/</guid>
      <description>Here goes list of use cases EventterMQ is good for.
Job queues When you need to process reliably jobs that can fail, are resource-intensive, need to have limited concurrency, or whose producers are written in different programming language (platform) than consumers, you probably will use some sort of messaging broker. Popular products for this are RabbitMQ and ActiveMQ.
EventterMQ can be used for this as well. It supports standardized messaging protocols like AMQP 0.</description>
    </item>
    
    <item>
      <title>Protocols</title>
      <link>https://eventter.io/docs/protocols/</link>
      <pubDate>Thu, 27 Dec 2018 15:34:04 +0100</pubDate>
      
      <guid>https://eventter.io/docs/protocols/</guid>
      <description>EventterMQ currently supports two protocols:
 AMQP 0.9.1 (standardized messaging protocol), gRPC service described by emq.proto (see it on GitHub).  AMQP 0.9.1 AMQP 0.9.1 is a binary protocol intended for messaging. It&amp;rsquo;s reasonably easy to implement, therefore there are many client libraries. It&amp;rsquo;s most well-know to be the core protocol of RabbitMQ. Probably most up-to-date list of client libraries can be found on RabbitMQ website here. Some notable mentions:</description>
    </item>
    
    <item>
      <title>Clustering</title>
      <link>https://eventter.io/docs/clustering/</link>
      <pubDate>Fri, 28 Dec 2018 16:16:19 +0100</pubDate>
      
      <guid>https://eventter.io/docs/clustering/</guid>
      <description>EventterMQ is designed from the start to be run as a distributed service. Assumption is that the brokers in the cluster can reach each other over low-latency LAN. More complex cluster topologies (e.g. different regions, different availability zones in a single region) are not implemented yet, so at the moment, it isn&amp;rsquo;t recommended to run cluster over WAN.
Network topology Brokers are expected to be run in a trusted private network.</description>
    </item>
    
    <item>
      <title>AMQP 0.9.1</title>
      <link>https://eventter.io/docs/amqp-0-9-1/</link>
      <pubDate>Fri, 28 Dec 2018 13:00:38 +0100</pubDate>
      
      <guid>https://eventter.io/docs/amqp-0-9-1/</guid>
      <description>In messaging overview we&amp;rsquo;ve learnt about two distinct models that allow decoupling of message producers and consumers. As said in the overview, AMQP chose exchange-queue model, but EventterMQ uses topic-consumer group model. In this article we&amp;rsquo;ll describe AMQ model in depth, explain how it maps to topics &amp;amp; consumer groups and show examples how to connect to the broker using AMQP.
 Note: Advanced Message Queueing Protocol
When this article refers to AMQP, it refers to AMQP 0.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://eventter.io/docs/design-doc/</link>
      <pubDate>Fri, 28 Dec 2018 17:46:02 +0100</pubDate>
      
      <guid>https://eventter.io/docs/design-doc/</guid>
      <description>EventterMQ is a cloud-native message queue / distributed log broker.
Why cloud-native?
 Distributed by default - running a single node is just a cluster with 1 member. Minimal configuration, 12-factor app. Nodes can go away, be dynamically removed, added etc. with cluster being still available.  Why message queue / distributed log?
 Support for multiple protocols for publishing and consuming messages  gRPC - main protocol, also used for inter-node communication AMQP 0.</description>
    </item>
    
  </channel>
</rss>